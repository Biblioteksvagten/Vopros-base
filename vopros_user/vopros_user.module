<?php
/**
 * @file
 * Code for the Vopros  user feature.
 */

/**
 * Implements hook_menu().
 */
function vopros_user_menu() {
  $items['admin/vopros/config/user'] = array(
    'title' => 'User settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('vopros_user_settings_form'),
    'access arguments' => array('administer vopros'),
  );

  return $items;
}

/**
 * Settings form for the vopros_user module.
 */
function vopros_user_settings_form($form, &$form_state) {
  $form['vopros_user_included_libraries'] = array(
    '#type' => 'textarea',
    '#title' => t('Included libraries'),
    '#description' => t('Enter the library ids you want to include to the library list, seperate by space and leave empty to include all.'),
    '#default_value' => variable_get('vopros_user_included_libraries', ''),
  );

  return system_settings_form($form);
}

function vopros_user_get_libraries() {
  $cache = cache_get('vopros_user_libraries', 'cache_field');
  // Return cache if possible.
  if (!empty($cache) && isset($cache->data) && !empty($cache->data)) {
    $libraries = $cache->data;
  }
  else {
    // Get the libraries from openagency service if no cache was found.
    $libraries = array();
    $library_types = array('Folkebibliotek', 'Forskningsbibliotek');
    foreach ($library_types as $library_type) {
      $client = new NanoSOAPClient('http://openagency.addi.dk/1.1/', array('namespaces' => array('' => 'http://oss.dbc.dk/ns/openagency')));
      $params = array('libraryType' => $library_type);
      $xml = $client->call('nameListRequest', $params);
      $result = DOMDocument::loadXML($xml);
      foreach ($result->getElementsByTagName('agency') as $agency) {
        $libraries[$agency->getElementsByTagName('agencyId')->item(0)->nodeValue] = $agency->getElementsByTagName('agencyName')->item(0)->nodeValue;
      }
    }
    asort($libraries);
    cache_set('vopros_user_libraries', $libraries, 'cache_field', REQUEST_TIME + 86400);
  }
  $include_libraries = variable_get('vopros_user_included_libraries', '');
  if ($include_libraries) {
    $include_libraries_list = explode(' ', $include_libraries);
    return array_intersect_key($libraries, array_flip(array_values($include_libraries_list)));
  }
  return $libraries;
}

/**
 * Implementation of hook_default_profile2_type().
 */
function vopros_user_default_profile2_type() {
  $items = array();
  $items['vopros_user_librarian'] = entity_import('profile2_type', '{
    "userCategory" : true,
    "userView" : true,
    "type" : "vopros_user_librarian",
    "label" : "Librarian",
    "weight" : "0",
    "data" : { "registration" : 1 }
  }');
  return $items;
}

/**
 * Implements hook_permission().
 */
function vopros_user_permission() {
  return array(
    'edit own shortcut links' =>  array(
      'title' => t('Edit own shortcut links'),
      'description' => t('Edit own shortcut links on user profile.'),
    ),
    'edit any shortcut links' =>  array(
      'title' => t('Edit any shortcut links'),
      'description' => t('Edit any shortcut links on user profile.'),
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vopros_user_form_user_profile_form_alter(&$form, &$form_state) {
  global $user;
  if (!empty($form['profile_vopros_user_librarian']['vopros_user_shortcuts'])) {
    $access = user_access('edit any shortcut links') || (user_access('edit own shortcut links') && $user->uid == $form['#user']->uid);
    $form['profile_vopros_user_librarian']['vopros_user_shortcuts']['#access'] = $access;
  }
}

/**
 * Implements hook_views_api().
 */
function vopros_user_views_api() {
  return array(
    'api' => 3,
  );
}
