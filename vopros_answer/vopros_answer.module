<?php

/**
 * @file
 */

/**
 * Implements hook_entity_info().
 */
function vopros_answer_entity_info() {
  $return = array(
    'vopros_answer' => array(
      'label' => t('Answer', array(), array('context' => 'a vopros answer')),
      'controller class' => 'VoprosAnswerEntityController',
      'base table' => 'vopros_answer',
      'revision table' => 'vopros_answer_revision',
      'fieldable' => TRUE,
      'label callback' => 'vorpros_answer_entity_label_callback',
      'entity keys' => array(
        'id' => 'answer_id',
        'revision' => 'revision_id',
      ),
      'bundles' => array(
        'vopros_answer' => array(
          'label' => t('Question', array(), array('context' => 'a vopros answer')),
          'admin' => array(
            'path' => 'admin/vopros/config/answer',

            'access arguments' => array('administer answers'),
          ),
        ),
      ),
      'load hook' => 'vopros_answer_load',
      'view modes' => array(
        'administrator' => array(
          'label' => t('Administrator'),
          'custom settings' => FALSE,
        ),
        'public' => array(
          'label' => t('Public'),
          'custom settings' => FALSE,
        ),
      ),
      'access callback' => 'vopros_answer_access',
      'views controller class' => 'EntityDefaultViewsController',
    ),
  );

  return $return;
}

/**
 * Implements hook_entity_property_info().
 */
function vopros_answer_entity_property_info() {
  $info = array();

  // Add meta-data about the basic commerce_line_item properties.
  $properties = &$info['vopros_answer']['properties'];

  $properties['question'] = array(
    'label' => t('Question'),
    'type' => 'vopros_question',
    'description' => t('The unique ID of the question the answer belongs to.'),
    'getter callback' => 'vopros_get_properties',
    'setter callback' => 'vopros_set_properties',
    'clear' => array('question_id'),
    'schema field' => 'vopros_question',
  );

  return $info;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function vopros_answer_entity_property_info_alter(&$info) {
  // Need to clear the quesiton cache when the question_id is altered.
  $info['vopros_answer']['properties']['question_id']['clear'] = array('question');
}

/**
 * Implements hook_views_data_alter()
 */
function vopros_answer_views_data_alter(&$data) {
  $data['vopros_answer']['question_id']['relationship'] = array(
    'handler' => 'views_handler_relationship',
    'base' => 'vopros_question',
    'field' => 'question_id',
    'label' => 'question',
  );
  $data['vopros_answer']['uid']['relationship'] = array(
    'handler' => 'views_handler_relationship',
    'base' => 'users',
    'field' => 'uid',
    'label' => 'user',
  );
}

/**
 * Label callback for the vopros_answer entity
 */
function vorpros_answer_entity_label_callback($entity) {
  return 'label';
}

/**
 * Implementation of hook_menu().
 */
function vopros_answer_menu() {
  return array(
    'admin/vopros/config/answer' => array(
      'title' => 'Answer settings',
      'description' => 'Configure general answer settings, fields, and displays.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_answer_settings_form'),
      'access arguments' => array('administer answers'),
      'file' => 'includes/vopros_answer.admin.inc',
    ),
    'admin/vopros/config/answer/settings' => array(
      'title' => 'Settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    ),
    'admin/vopros/question/%vopros_question/new-answer' => array(
      'title' => 'Answer question',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_answer_form', 3, vopros_answer_new()),
      'access callback' => 'vopros_answer_question_access',
      'access arguments' => array(3),
      'file' => 'includes/vopros_answer.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    ),
    'admin/vopros/answer/%vopros_answer/edit' => array(
      'title' => 'Edit answer',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_answer_form', '', 3),
      'access callback' => 'vopros_answer_access',
      'access arguments' => array('edit', 3),
      'file' => 'includes/vopros_answer.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    ),
  );
}

/**
 * Implements hook_permission().
 */
function vopros_answer_permission() {
  $permissions = array(
    'administer answers' => array(
      'title' => t('Administer answers'),
      'restrict access' => TRUE,
    ),
    'access answers' => array(
      'title' => t('Access lists of answers, primarily for viewing and referencing'),
      'restrict access' => TRUE,
    ),
    'create answers' => array(
      'title' => t('Create answers'),
      'restrict access' => TRUE,
    ),
    'edit any answer' => array(
      'title' => t('Edit any answer'),
      'restrict access' => TRUE,
    ),
    'edit own answers' => array(
      'title' => t('Edit own answers'),
      'restrict access' => TRUE,
    ),
    'view own answers' => array(
      'title' => t('View own answers'),
    ),
  );

  return $permissions;
}

/**************************
*                         *
*     ENTITY CALLBACKS    *
*                         *
/*************************/

function vopros_answer_new($values = array()) {
  $default_values = array(
    'status' => 'in progress',
    'answer_text' => '',
  );
  $values += $default_values;
  if (isset($values['question_id'])) {
    $values['question'] = $values['question_id'];
  }
  return entity_create('vopros_answer', $values);
}
/**
 * Save a question
 *
 * @param $answer
 *    The answer object
 * @param $revision
 *    Bolean indicator, if a new revision should be created.
 */
function vopros_answer_save($answer, $revision = 1) {
  $answer->revision = $revision;
  entity_save('vopros_answer', $answer);
}

/**
 * Loads an answer by ID.
 */
function vopros_answer_load($answer_id) {
  $answers = vopros_answer_load_multiple(array($answer_id), array());
  return $answers ? reset($answers) : FALSE;
}

/**
 * Loads multiple answers by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $answer_ids
 *   An array of answer IDs.
 * @param $conditions
 *   An array of conditions on the {vopros_answer} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal answer loading cache.
 *
 * @return
 *   An array of answer objects indexed by answer_id.
 */
function vopros_answer_load_multiple($answer_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('vopros_answer', $answer_ids, $conditions, $reset);
}

/**
 * Implements hook_vopros_question_view_alter().
 */
function vopros_answer_vopros_question_view_alter(&$build, $question) {
  if ($question->question_status == 'new') {
    $build[] = drupal_get_form('vopros_answer_question_view_form', $question);
  }
  elseif ($question->question_status == 'locked') {
    global $user;
    if ($question->uid == $user->uid || user_access('administer answers')) {
      $answers = vopros_answer_load_multiple(FALSE, array('question_id' => $question->question_id));
      if ($answers) {
        $output = theme('vopros_answer_answers_pl_content', array('answers' => $answers, 'edit' => TRUE));
        $build[] = array('#markup' => $output);
      }
      else {
        $build[] = drupal_get_form('vopros_answer_question_view_form', $question);
      }
    }
  }
  elseif ($question->question_status == 'in progress') {
    $answers = vopros_answer_load_multiple(FALSE, array('question_id' => $question->question_id));
    if ($answers) {
      $output = theme('vopros_answer_answers_pl_content', array('answers' => $answers, 'edit' => TRUE));
    }
    $build[] = drupal_get_form('vopros_answer_question_view_form', $question);
  }
}

/**
 * Form to answer questions
 */
function vopros_answer_question_view_form($form, &$form_state, $question) {
  $form['question'] = array(
    '#type' => 'value',
    '#value' => $question
  );

  $form['answer_question'] = array(
    '#type' => 'submit',
    '#value' => t('Answer question'),
  );

  return $form;
}

/**
 * Submit handler for function vopros_answer_question_view_form().
 */
function vopros_answer_question_view_form_validate($form, &$form_state) {
  $question = vopros_question_load($form_state['values']['question']->question_id, TRUE);
  if ($question->question_status != 'new' && $question->question_status != 'in progress') {
    form_set_error('', t("You can't answer the question, the question is already being answered"));
  }
  $form_state['values']['question'] = $question;
}

function vopros_answer_question_view_form_submit($form, &$form_state) {
  $question = $form_state['values']['question'];
  $question->question_status = 'locked';
  $question->uid = $GLOBALS['user']->uid;
  vopros_question_save($question);
  $answers = vopros_answer_load_multiple(FALSE, array('question_id' => $question->question_id));
  // If there is only a single answer, the user should edit that, else a new is created.
  if (count($answers) == 1) {
    $answer = array_shift($answers);
    $answer->uid = $GLOBALS['user']->uid;
    $answer->author_name = $GLOBALS['user']->name;
    vopros_answer_save($answer);
    $form_state['redirect'] = 'admin/vopros/answer/' . $answer->answer_id . '/edit';
  }
  else {
    $form_state['redirect'] = 'admin/vopros/question/' . $question->question_id . '/new-answer';
  }
}

/**
 * Checks order access for various operations.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $answer
 *   Optionally an anwer to check access for.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function vopros_answer_access($op, $answer = NULL, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : clone($user);

  // Grant access to any operation for any order for administrators.
  if (user_access('administer answers', $account)) {
    return TRUE;
  }

  // Grant view access to users with the administrative access orders permission
  // or to a user's own orders with the view own orders permission.
  if ($op == 'view') {
    if (user_access('access answers', $account)) {
      return TRUE;
    }
    elseif (user_access('view own answers', $account) && $order->uid == $account->uid) {
      return TRUE;
    }
  }

  if ($op == 'create' && user_access('create answers', $account)) {
    return TRUE;
  }

  if (isset($order) && ($op == 'update' || $op == 'delete')) {
    if (user_access('edit any answer', $account)) {
      return TRUE;
    }

    // Others either don't have any access or must match the order uid.
    if ($account->uid && user_access('edit own answers', $account) && $order->uid == $account->uid) {
      return TRUE;
    }
  }

  return FALSE;
}

/**
 * Function to determine if a user should be able to create an answer for a question
 */
function vopros_answer_question_access($question, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : clone($user);
  if ($question->question_status == 'locked' && ($question->uid == $account->uid || user_access('administer answers', $account))) {
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'vopros_answer', '=')
      ->propertyCondition('question_id', $question->question_id, '=')
      ->count();
    if ($query->execute() > 0) {
      return FALSE;
    }
    return TRUE;
  }
  if ($question->question_status != 'new') {
    return FALSE;
  }
  return vopros_answer_access('create');
}

function vopros_answer_theme() {
  return array(
    'vopros_answer_answer_content' => array(
      'render element' => 'answer',
      'file' => 'includes/vopros_answer.theme.inc',
    ),
    'vopros_answer_answers_pl_content' => array(
      'variables' => array('answers' => NULL, 'edit' => NULL),
      'file' => 'includes/vopros_answer.theme.inc',
    )
  );
}