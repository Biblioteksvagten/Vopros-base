<?php

/**
 * @file
 */

/**
 * Implements hook_init().
 */
function vopros_question_init() {
  if (arg(0) == 'vopros' || arg(1) == 'vopros') {
    drupal_add_css(drupal_get_path('module', 'vopros_question') . '/theme/vopros_question.base.css');
    drupal_add_js(drupal_get_path('module', 'vopros_question') . '/js/vopros_question.base.js');
    drupal_add_js(drupal_get_path('module', 'vopros_question') . '/js/tooltip.js');
  }
}

/**
 * Implements hook_entity_info().
 */
function vopros_question_entity_info() {
  $return = array(
    'vopros_question' => array(
      'label' => t('Question', array(), array('context' => 'a vopros question')),
      'controller class' => 'VoprosQuestionEntityController',
      'base table' => 'vopros_question',
      'revision table' => 'vopros_question_revision',
      'fieldable' => TRUE,
      'uri callback' => 'vopros_question_uri',
      'entity keys' => array(
        'id' => 'question_id',
        'revision' => 'revision_id',
      ),
      'bundles' => array(
        'vopros_question' => array(
          'label' => t('Question', array(), array('context' => 'a vopros question')),
          'admin' => array(
            'path' => 'admin/vopros/config/question',
            'access arguments' => array('administer questions'),
          ),
        ),
      ),
      'load hook' => 'vopros_question_load',
      'view modes' => array(
        'administrator' => array(
          'label' => t('Administrator'),
          'custom settings' => FALSE,
        ),
        'public' => array(
          'label' => t('Public'),
          'custom settings' => FALSE,
        ),
        'teaser' => array(
          'label' => t('Teaser'),
          'custom settings' => FALSE,
        ),
      ),
      'access callback' => 'vopros_question_access',
      'views controller class' => 'EntityDefaultViewsController',
    ),
  );

  return $return;
}

/**
 * Implements hook_field_extra_fields().
 */
function vopros_question_field_extra_fields() {
  $extra = array();

  $extra['vopros_question']['vopros_question'] = array(
    'form' => array(
      'question_title' => array(
        'label' => t('Question title'),
        'description' => t('The title of the question'),
        'weight' => -5,
      ),
      'question_content' => array(
        'label' => t('Question content'),
        'description' => t('The content of the question'),
        'weight' => -4,
      ),
      'question_deadline' => array(
        'label' => t('Deadline'),
        'description' => t('The deadline for the question'),
        'weight' => -3,
      ),
      'question_usage' => array(
        'label' => t('Usage'),
        'description' => t('The usage of the question'),
        'weight' => -2,
      ),
      'question_note' => array(
        'label' => t('Question note'),
        'description' => t('Internal note regarding the question'),
        'weight' => -1,
      ),
      'ask' => array(
        'label' => t('User data'),
        'description' => t('Data about the user asking the question'),
        'weight' => -0,
      ),
      'log' => array(
        'label' => t('Internal log'),
        'description' => t('Internal log about the question itself.'),
        'weight' => 1,
      ),
    ),
    'display' => array(
      'question_title' => array(
        'label' => t('Question title'),
        'description' => t('The title of the question'),
        'weight' => -6,
      ),
      'question_status' => array(
        'label' => t('Question status'),
        'description' => t('The status of the question and reason for status if possible'),
        'weight' => -5,
      ),
      'question_content' => array(
        'label' => t('Question content'),
        'description' => t('The content of the question'),
        'weight' => -4,
      ),
      'created' => array(
        'label' => t('Created'),
        'description' => t('When the question was created'),
        'weight' => -3,
      ),
      'question_deadline' => array(
        'label' => t('Deadline'),
        'description' => t('The deadline for the question'),
        'weight' => -3,
      ),
      'question_usage' => array(
        'label' => t('Usage'),
        'description' => t('The usage of the question'),
        'weight' => -2,
      ),
      'user_answer_preference' => array(
        'label' => t('Prefered answer method'),
        'weight' => -2,
      ),
      'question_note' => array(
        'label' => t('Question note'),
        'description' => t('Internal note regarding the question'),
        'weight' => -1,
      ),
      'ask' => array(
        'label' => t('User data'),
        'description' => t('Data about the user asking the question'),
        'weight' => 0,
      ),
      'log' => array(
        'label' => t('Internal log'),
        'description' => t('Internal log about the question itself.'),
        'weight' => 1,
      ),
      'buttons' => array(
        'label' => t('Buttons'),
        'description' => t('The various actions that can be taken.'),
        'weight' => 100,
      ),
    ),
  );

  drupal_alter('vopros_question_field_extra_fields', $extra);

  return $extra;
}


/**
 * Entity uri callback.
 */
function vopros_question_uri($question) {
  return array(
    'path' => 'admin/vopros/questions/' . $question->question_id,
  );
}

/**
 * Implements hook_enable().
 */
function vopros_question_enable() {
  // When the module is enabled, we need to make sure that the
  // menu is buildt correctly with the entity info.
  menu_rebuild();
  // Create the question vopros_question_subject_catagory vocabolary
  if (!taxonomy_vocabulary_machine_name_load('vopros_question_subject_catagory')) {
    $vocabulary = (object) array(
      'name' => t('Subject catagory'),
      'machine_name' => 'vopros_question_subject_catagory',
      'module' => 'vopros_question',
    );
    taxonomy_vocabulary_save($vocabulary);
  }
  vopros_question_configure_question();
}


/**
 * Implementation of hook_menu().
 */
function vopros_question_menu() {
  return array(
    'admin/vopros/config/question' => array(
      'title' => 'Question settings',
      'description' => 'Configure general question settings, fields, and displays.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_question_settings_form'),
      'access arguments' => array('administer questions'),
      'file' => 'includes/vopros_question.admin.inc',
    ),
    'admin/vopros/config/question/settings' => array(
      'title' => 'Settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    ),
    'admin/vopros/questions/add' => array(
      'title' => 'Add a question',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_question_question_form', vopros_question_new()),
      'access callback' => 'vopros_question_access',
      'access arguments' => array('create'),
      'file' => 'includes/vopros_question.admin.inc',
    ),
    'admin/vopros/questions/%vopros_question' => array(
      'title callback' => 'vopros_question_title',
      'title arguments' => array(3),
       'page callback' => 'vopros_question_page_view',
       'page arguments' => array(3),
       'access callback' => 'vopros_question_access',
       'access arguments' => array('view'),
       'file' => 'includes/vopros_question.admin.inc',
    ),
    'admin/vopros/questions/%vopros_question/view' => array(
      'title' => 'View',
       'type' => MENU_DEFAULT_LOCAL_TASK,
       'weight' => -10,
    ),
    'admin/vopros/questions/%vopros_question/admin-edit' => array(
      'title' => 'Admin edit',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_question_question_form', 3),
      'access callback' => 'vopros_question_access',
      'access arguments' => array('update'),
      'file' => 'includes/vopros_question.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    ),
    'admin/vopros/questions/%vopros_question/edit' => array(
      'title' => 'Edit',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_question_question_frontend_form', 3),
      'access callback' => 'vopros_question_access',
      'access arguments' => array('update'),
      'file' => 'includes/vopros_question.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    ),
    'admin/vopros/questions/%vopros_question/revisions' => array(
      'title' => 'Revisions',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_question_revisions_form', 3),
      'access callback' => 'vopros_question_access',
      'access arguments' => array('update'),
      'file' => 'includes/vopros_question.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    ),
    'admin/vopros/questions/%vopros_question/revisions/view' => array(
      'title' => 'Diff',
      'page callback' => 'vopros_question_diffs_show',
      'page arguments' => array(3, 6, 7),
      'type' => MENU_LOCAL_TASK,
      'access callback' => 'vopros_question_access',
      'access arguments' => array('update'),
      'tab_parent' => 'admin/vopros/questions/%/revisions',
      'file' => 'includes/vopros_question.admin.inc',
    ),
    'admin/vopros/questions/%vopros_question/revisions/%vopros_question_revision/revert' => array(
      'title' => 'Revert revision',
      'page callback' => 'vopros_question_revision_revert',
      'page arguments' => array(3, 5),
      'access callback' => 'vopros_question_access',
      'access arguments' => array('update'),
      'file' => 'includes/vopros_question.admin.inc',
    ),
    'admin/vopros/questions/%vopros_question/close' => array(
      'title' => 'Close',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_question_close_question_form', 3),
      'access callback' => 'vopros_question_access',
      'access arguments' => array('update'),
      'file' => 'includes/vopros_question.admin.inc',
    ),
    'vopros/question/create/service' => array(
      'page callback' => 'vopros_question_create_service',
      'access arguments' => array('access content'),
      'file' => 'includes/vopros_question.pages.inc',
    ),
    'vopros/question/create/sms' => array(
      'page callback' => 'vopros_question_create_sms',
      'access arguments' => array('access content'),
      'file' => 'includes/vopros_question.pages.inc',
    ),
  );
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function vopros_question_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // Add action link 'admin/commerce/questions/add' on 'admin/commerce/questions'.
  if ($root_path == 'admin/vopros/questions') {
    $item = menu_get_item('admin/vopros/questions/add');
    if ($item['access']) {
      $data['actions']['output'][] = array(
        '#theme' => 'menu_local_action',
        '#link' => $item,
      );
    }
  }
}

/**
 * Implements hook_permission().
 */
function vopros_question_permission() {
  $permissions = array(
    'administer questions' => array(
      'title' => t('Administer questions'),
      'restrict access' => TRUE,
    ),
    'access questions' => array(
      'title' => t('Access lists of questions, primarily for viewing and referencing'),
      'restrict access' => TRUE,
    ),
    'create questions' => array(
      'title' => t('Create questions'),
      'restrict access' => TRUE,
    ),
    'edit questions' => array(
      'title' => t('Edit any question'),
      'restrict access' => TRUE,
    ),
    'contact user about question' => array(
      'title' => t('Contact user about question'),
    ),
  );

  return $permissions;
}

/**
 * Checks question access for various operations.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function vopros_question_access($op, $question = NULL, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : clone($user);

  // Grant access to any operation for any question for administrators.
  if (user_access('administer questions', $account)) {
    return TRUE;
  }

  // Grant view access to users with the administrative access questions permission
  // or to a user's own questions with the view own questions permission.
  if ($op == 'view') {
    if (user_access('access questions', $account)) {
      return TRUE;
    }
  }

  if ($op == 'create' && user_access('create questions', $account)) {
    return TRUE;
  }

  if (($op == 'update' || $op == 'delete') && user_access('edit any question', $account)) {
    return TRUE;
  }

  if ($op == 'contact' && user_acccess('contact user about question')) {
    if ($question && $question->question_status == 'assigned' && $question->uid != $account->uid) {
      return FALSE;
    }
    return TRUE;
  }

  return FALSE;
}

/**
 * Title callback for questions
 */
function vopros_question_title($question) {
  return isset($question->question_title) && !empty($question->question_title) ? $question->question_title : t('New question');
}

/**
 * Create a new question object
 */
function vopros_question_new($values = array()) {
  $default_values = array(
    'question_status' => 'new',
    'question_title' => t('New question'),
    'question_content' => '',
    'question_deadline' => -1,
    'question_status_reason' => '',
    'user_age' => 'no inform',
  );
  $values += $default_values;
  return entity_create('vopros_question', $values);
}

/**
 * Implements hook_entity_presave().
 */
function vopros_question_entity_presave($entity, $type) {
  // Set the calculated deadline timestamp.
  if ($type == 'vopros_question' && $entity->created) {
    if ($entity->question_deadline == -1) {
      // We set the deadline quite high: 1 year from creation.
      $entity->question_deadline_timestamp = 86400 * 365 + $entity->created;
    }
    else {
      // Set the deadline to x hours from creation.
      $entity->question_deadline_timestamp = 3600 * $entity->question_deadline + $entity->created;
    }
  }
}

/**
 * Save a question
 *
 * @param $question
 *    The question object
 * @param $revision
 *    Bolean indicator, if a new revision should be created.
 */
function vopros_question_save($question, $revision = 1) {
  $question->revision = $revision;
  entity_save('vopros_question', $question);
}

/**
 * Loads an question by ID.
 */
function vopros_question_load($question_id, $revision_id = NULL, $reset = FALSE) {
  $conditions = array();
  if ($revision_id) {
    $conditions['revision_id'] = $revision_id;
  }
  $questions = vopros_question_load_multiple(array($question_id), $conditions, $reset);
  return $questions ? reset($questions) : FALSE;
}

/**
 * Loads an revision of a question.
 */
function vopros_question_revision_load($revision_id) {
  $questions = vopros_question_load_multiple(array(), array('revision_id' => $revision_id), FALSE);
  return $questions ? reset($questions) : FALSE;
}

/**
 * Validates the data for the question.
 */
function vopros_question_validate_data($question) {
  return entity_get_controller('vopros_question')->validateData($question);
}

/**
 * Get a list of revisions for a question.
 */
function vopros_question_revision_list($question) {
  $revisions = array();
  $result = db_query("SELECT q.revision_id, q.revision_uid, q.uid, q.question_title, q.question_content, q.question_note, q.question_status, q.question_usage, q.log, q.revision_timestamp, u.name FROM {vopros_question_revision} AS q
                      LEFT JOIN {users} AS u ON q.revision_uid = u.uid
                      WHERE q.question_id = :question_id
                      ORDER BY -q.revision_id", array(':question_id' => $question->question_id));
  foreach ($result as $revision) {
    $revisions[$revision->revision_id] = $revision;
  }
  return $revisions;
}

/**
 * Loads multiple questions by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $question_ids
 *   An array of question IDs.
 * @param $conditions
 *   An array of conditions on the {vopros_question} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal question loading cache.
 *
 * @return
 *   An array of question objects indexed by question_id.
 */
function vopros_question_load_multiple($question_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('vopros_question', $question_ids, $conditions, $reset);
}

/**
 * Implements hook_views_api().
 */
function vopros_question_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'vopros_question') . '/includes/views',
  );
}

/**
 * Implement hook_form_alter().
 */
function vopros_question_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      $form['#action'] = '';
      $form['#submit'][] = 'vopros_question_user_login_submit';
      break;
  }
}

function vopros_question_user_login_submit(&$form, &$form_state) {
  $form_state['redirect'] = 'admin/vopros/questions/list';
}

/**
 * Implements hook_entity_property_info().
 */
function vopros_question_entity_property_info() {
  $info = array();

  // Add meta-data about the basic commerce_line_item properties.
  $properties = &$info['vopros_question']['properties'];

  $properties['user'] = array(
    'label' => t('Question answere'),
    'type' => 'user',
    'description' => t('The uid of the user answering the question.'),
    'getter callback' => 'vopros_base_get_properties',
    'setter callback' => 'vopros_base_set_properties',
    'clear' => array('uid'),
    'schema field' => 'users',
  );

  $properties['url'] = array(
    'label' => t('Question URL'),
    'type' => 'uri',
    'description' => t("The URL of the question page."),
    'getter callback' => 'vopros_quesiton_get_properties',
  );

  return $info;
}

/**
 * Implements hook_entity_property_info_alter().
 */
function vopros_question_entity_property_info_alter(&$info) {
  // Need to clear the quesiton cache when the question_id is altered.
  $info['vopros_question']['properties']['uid']['clear'] = array('user');
}

/**
 * Implements hook_views_data_alter().
 */
function vopros_question_views_data_alter(&$data) {
  // Add relationships to other tables.
  $data['vopros_question']['uid'] = array(
    'title' => 'Question owner',
    'help' => 'Question uid',
    'field' => array(
      'field' => 'uid',
      'handler' => 'views_handler_field_user',
      'click sortable' => TRUE,
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_user_uid',
      'name field' => 'name', // display this field in the summary
    ),
    'filter' => array(
      'title' => t('Question owner'),
      'handler' => 'views_handler_filter_user_name',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'relationship' => array(
      'handler' => 'views_handler_relationship',
      'base' => 'users',
      'field' => 'uid',
      'label' => 'user',
    ),
  );

  $data['vopros_question']['revision_id']['relationship'] = array(
    'handler' => 'views_handler_relationship',
    'base' => 'vopros_question_revision',
    'field' => 'revision_id',
    'label' => 'Question revision',
  );

  // Set timestamps as dates.
  $data['vopros_question']['created']['field']['handler'] =
  $data['vopros_question']['changed']['field']['handler']  = 'views_handler_field_date';
  $data['vopros_question']['created']['sort']['handler'] =
  $data['vopros_question']['changed']['sort']['handler'] =
  $data['vopros_question']['question_deadline_timestamp']['sort']['handler'] = 'views_handler_sort_date';
  $data['vopros_question']['created']['filter']['handler'] =
  $data['vopros_question']['changed']['filter']['handler'] =
  $data['vopros_question']['question_deadline_timestamp']['filter']['handler'] = 'views_handler_filter_date';

  // Add custom handlers for select fields.
  $data['vopros_question']['user_age']['field']['handler'] =
  $data['vopros_question']['question_status']['field']['handler'] =
  $data['vopros_question']['question_usage']['field']['handler'] = 'vopros_question_handler_field_vopros_question';
  $data['vopros_question']['question_deadline_timestamp']['field']['handler'] = 'vopros_question_handler_field_date';

  $data['vopros_question']['question_usage']['argument']['handler'] =
  $data['vopros_question']['question_usage']['filter']['handler'] = 'vopros_question_usage_views_handler_filter_in_operator';

  $data['vopros_question']['question_status']['argument']['handler'] =
  $data['vopros_question']['question_status']['filter']['handler'] = 'vopros_question_status_views_handler_filter_in_operator';


  // Add revision table.
  $data['vopros_question_revision'] = $data['vopros_question'];
  $data['vopros_question_revision']['table'] = array(
    'group' => 'Question revisions',
    'base' => array(
      'field' => 'revision_id',
      'title' => 'Question revisions',
      'help' => '',
    ),
  );
  // Add revision uid.
  $data['vopros_question_revision']['revision_uid'] = $data['vopros_question_revision']['uid'];
  unset($data['vopros_question_revision']['revision_id']['relationship']);

  $data['vopros_question_revision']['question_id']['relationship'] = array(
    'handler' => 'views_handler_relationship',
    'base' => 'vopros_question',
    'field' => 'question_id',
    'label' => 'Question',
  );
}

/**
 * Configure the vopros email entity with fields.
 */
function vopros_question_configure_question() {
  $type = 'vopros_question';
  $bundle = 'vopros_question';

  // Create a taxonomy term reference field
  $field_name = 'subject_catagory';
  $field = field_info_field($field_name);
  $instance = field_info_instance($type, $field_name, $bundle);

  if (empty($field)) {
    $field = array(
      'cardinality' => -1,
      'entity_types' => array($type),
      'translatable' => FALSE,
      'assigned' => TRUE,
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'vopros_question_subject_catagory',
            'parent' => 0,
          ),
        ),
      ),
      'field_name' => $field_name,
      'type' => 'taxonomy_term_reference',
    );
    field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'entity_type' => $type,
      'bundle' => $bundle,
      'required' => FALSE,
      'settings' => array(),
      'field_name' => $field_name,
      'label' => t('Subject'),
      'widget' => array(
        'type' => 'options_buttons',
      ),
      'settings' => array(),

      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'taxonomy_term_reference_link',
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Builds a structured array representing the questions' content.
 */
function vopros_question_build_content($question, $view_mode = 'administrator', $langcode = NULL) {
  $question->content = array();
  field_attach_prepare_view('vopros_question', array($question->question_id => $question), $view_mode);
  entity_prepare_view('vopros_question', array($question->question_id => $question));
  $question->content = field_attach_view('vopros_question', $question, $view_mode, $langcode);
  // Add extra fields
  $question->content['question_title'] = array(
    '#theme' => 'vopros_question_title',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );
  $question->content['question_content'] = array(
    '#theme' => 'vopros_question_content',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );
  $question->content['question_deadline'] = array(
    '#theme' => 'vopros_question_deadline',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );
  $question->content['question_usage'] = array(
    '#theme' => 'vopros_question_usage',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );
  $question->content['user_answer_preference'] = array(
    '#theme' => 'vopros_question_user_answer_preference',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );
  
  $question->content['question_note'] = array(
    '#theme' => 'vopros_question_note',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );
  $question->content['ask'] = array(
    '#theme' => 'vopros_question_user_data',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );
  $question->content['log'] = array(
    '#theme' => 'vopros_question_log',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );
  $question->content['created'] = array(
    '#theme' => 'vopros_question_created',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );
  $question->content['question_status'] = array(
    '#theme' => 'vopros_question_status',
    '#question' => $question,
    '#view_mode' => $view_mode,
  );

  if ($view_mode == 'administrator') {
    $cloned_question = clone($question);
    unset($cloned_question->content);
    $feed = array();
    // Handle invoking the hook ourself, as we need to pass by reference.
    $hook = 'vopros_question_activity_feed';
    foreach (module_implements($hook) as $module) {
      $function = $module . '_' . $hook;
      if (function_exists($function)) {
        $function($cloned_question, $feed);
      }
    }
    $question->content['feed'] = $feed;
  }

  $question->content['buttons'] = drupal_get_form('vopros_question_handle_question_form', $question);

  module_invoke_all('entity_view', $question, 'vopros_question', $view_mode, $langcode);

}

/**
 * Utility function to get the question usage options
 */
function _vopros_question_usage() {
  return array(
    'business' => t('Business'),
    'other' => t('Other'),
    'personal' => t('Personal'),
    'school1' => t('Assignment for groundschool'),
    'school2' => t('Assignment for highschool'),
    'school3' => t('Assignment for college education'),
    'school4' => t('Assignment for university education or research'),
  );
}

function _vopros_question_user_answer_preference() {
  return array(
    'mail' => t('Email'),
    'sms' => t('SMS'),
  );
}

/**
 * Utility function to get the question usage options
 */
function _vopros_question_deadline() {
  return array(
    -1 => t('No deadline'),
    2 => t('2 hours'),
    24 => t('1 day'),
    168 => t('1 week'),
  );
}

/**
 * Utility function to get the question user age options.
 */
function _vopros_question_user_age() {
  return array(
    '0 - 14 years' => t('0 - 14 years'),
    '15 - 19 years' => t('15 - 19 years'),
    '20 - 25 years' => t('20 - 25 years'),
    '26 - 45 years' => t('26 - 45 years'),
    '46 - 65 years' => t('46 - 65 years'),
    '66 +' => t('66 +'),
    'no inform' => t('Doesn\'t want to inform'),
  );
}

/**
 * Utility function to get the question status options.
 */
function _vopros_question_status() {
  return array(
    'new' => t('New'),
    'active' => t('Active'),
    'assigned' => t('Assigned'),
    'answered' => t('Answered'),
    'closed' => t('Closed without answer'),
  );
}

/**
 * Utility function to get the question status reason options.
 */
function _vopros_question_status_reason() {
  return array(
    'spam' => t('Spam'),
    'problem question' => t('Problem question'),
    'answered' => t('Already answered'),
    'ask for email' => t('Ask for email'),
    'need more info' => t('Need more info'),
    'no time for deadline' => t('Not enough time for deadline'),
    'created from email' => t('Created from received email'),
    'reactivated by email' => t('Reactivated by email'),
    'reopened by user' => t('Reopened by user'),
    'locked for answering' => t('Locked for answering'),
    'released' => t('Released'),
  );
}


/**
 * Implements hook_theme().
 */
function vopros_question_theme() {
  $path = drupal_get_path('module', 'vopros_question') . '/theme';
  return array(
    'vopros_question' => array(
      'render element' => 'elements',
      'template' => 'vopros-question',
      'path' => $path,
      'file' => 'vopros_question.theme.inc',
    ),
    'vopros_question_status' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_title' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_content' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_deadline' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_usage' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_user_data' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_note' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_log' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_created' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_revision_question_feed' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
    'vopros_question_user_answer_preference' => array(
      'render element' => 'question',
      'file' => 'vopros_question.theme.inc',
      'path' => $path,
    ),
  );
}

/**
 * Form to handle processing a question.
 */
function vopros_question_handle_question_form($form, &$form_state, $question) {
  $form['question'] = array(
    '#type' => 'value',
    '#value' => $question,
  );

  // The question is closed, make it possible to open
  if (in_array($question->question_status, array('answered', 'closed'))) {
    $form['open'] = array(
      '#type' => 'submit',
      '#value' => t('Open question'),
      '#submit' => array('vopros_question_handle_question_form_open_submit'),
    );
  }
  // The question is open, make it possible to close it
  else {
    $form['contact'] = array(
      '#type' => 'submit',
      '#value' => t('Contact user'),
    );

    $form['close'] = array(
      '#type' => 'submit',
      '#value' => t('Close question'),
      '#submit' => array('vopros_question_handle_question_form_close_submit'),
    );
  }

  $form['edit'] = array(
    '#type' => 'submit',
    '#value' => t('Edit question'),
    '#submit' => array('vopros_question_handle_question_form_edit_submit'),
  );

  return $form;
}

/**
 * Submit handler for vopros_question_handle_quesiton_form edit action.
 */
function vopros_question_handle_question_form_edit_submit(&$form, &$form_state) {
  $form_state['redirect'] = 'admin/vopros/questions/' . $form_state['values']['question']->question_id . '/edit';
}

/**
 * Submit handler for vopros_question_handle_quesiton_form close action.
 */
function vopros_question_handle_question_form_close_submit(&$form, &$form_state) {
  $form_state['redirect'] = 'admin/vopros/questions/' . $form_state['values']['question']->question_id . '/close';
}

/**
 * Submit handler for vopros_question_handle_quesiton_form open action.
 */
function vopros_question_handle_question_form_open_submit(&$form, &$form_state) {
  $question = $form['question']['#value'];
  $question->question_status = 'active';
  $question->question_status_reason = 'reopened by user';
  vopros_question_save($question);
  drupal_set_message(t("Question has been reopened"));
}

function vopros_question_get_reasons($type = 'contact_mail') {
  switch ($type) {
    case 'close':
     $options = array(
      'spam' => t('Spam'),
      'problem question' => t('Problem question'),
      'answered' => t('Already answered'),
     );
     break;
    case 'contact_sms':
      $options = array(
        'ask for email' => t('Ask for email'),
        'need more info' => t('Need more info'),
        'no time for deadline' => t('Not enough time for deadline'),
      );
      break;
    case 'contact_mail':
    default:
      $options = array(
        'need more info' => t('Need more info'),
        'no time for deadline' => t('Not enough time for deadline'),
      );
  }
  return $options;
}

/**
 * Implements hook_vopros_question_activity_feed().
 */
function vopros_question_vopros_question_activity_feed($question, &$feed) {
  $query = db_select('vopros_question_revision', 'v');
  $revisions = $query
    ->fields('v', array('revision_uid', 'question_status', 'question_status_reason', 'revision_timestamp', 'revision_id', 'question_id'))
    ->condition('question_id', $question->question_id, '=')
    ->orderBy('revision_timestamp', 'ASC')
    ->execute()
    ->fetchAll();
  $changes = array();
  $status = $revisions[0]->question_status;
  $reason = $revisions[0]->question_status_reason;
  foreach ($revisions as $revision) {
    if ($revision->question_status != $status || $revision->question_status_reason != $reason) {
      $feed['question_revision_' . $revision->revision_id] = array(
        '#theme' => 'vopros_question_revision_question_feed',
        '#revision' => $revision,
        '#weight' => $revision->revision_timestamp,
      ) ;
      $status = $revision->question_status;
      $reason = $revision->question_status_reason;
    }
  }
}

function vopros_quesiton_get_properties($question, array $options, $name, $entity_type) {
  switch ($name) {
    case 'url':
      if (empty($question->question_id)) {
        return NULL;
      }
      $return = entity_uri('vopros_question', $question);
      return $return ? url($return['path'], $return['options'] + $options) : '';
      break;
  }
}
