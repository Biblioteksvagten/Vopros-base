<?php

/**
 * @file
 * The vopros_log module creates a log entity that can be asociated to
 * questions or answers. These logs are for internal use only.
 */

/**
 * Implements hook_entity_info().
 */
function vopros_log_entity_info() {
  $return = array(
    'vopros_log' => array(
      'label' => t('Log', array(), array('context' => 'a vopros log')),
      'controller class' => 'VoprosLogEntityController',
      'base table' => 'vopros_log',
      // No revision table needed for logs.
      // Logs are simple and can't and shouldn't have fields.
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'log_id',
      ),
      'bundles' => array(
        'vopros_log' => array(
          'label' => t('Log', array(), array('context' => 'a vopros log')),
        ),
      ),
      'load hook' => 'vopros_log_load',
      'view modes' => array(
        'administrator' => array(
          'label' => t('Administrator'),
          'custom settings' => FALSE,
        ),
      ),
      'access callback' => 'vopros_log_access',
      'views controller class' => 'EntityDefaultViewsController',
    ),
  );

  return $return;
}

/**
 * Implementation of hook_init().
 */
function vopros_log_init() {
  drupal_add_css(drupal_get_path('module', 'vopros_log') . '/theme/vopros_log.base.css');
}

/**
 * Create a new log object
 */
function vopros_log_new($values = array()) {
  $default_values = array();
  $values += $default_values;
  return entity_create('vopros_log', $values);
}

/**
 * Save a log.
 *
 * @param $log
 *    The log object
 */
function vopros_log_save($log) {
  entity_save('vopros_log', $log);
}

/**
 * Loads an question by ID.
 *
 * @param $log_id
 *    The log id
 * @param $reset
 *   Whether to reset the internal log loading cache.
 *
 * @return A vopros log object or FALSE if no log was found.
 */
function vopros_log_load($log_id, $reset = FALSE) {
  $logs = vopros_log_load_multiple(array($log_id), array(), $reset);
  return $logs ? reset($logs) : FALSE;
}

/**
 * Loads multiple questions by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $log_ids
 *   An array of log IDs.
 * @param $conditions
 *   An array of conditions on the {vopros_log} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal log loading cache.
 *
 * @return
 *   An array of log objects indexed by log_id.
 */
function vopros_log_load_multiple($log_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('vopros_log', $log_ids, $conditions, $reset);
}

function vopros_log_form($form, &$form_state, $log = NULL, $question_id = NULL, $answer_id = NULL) {
  $form['question_id'] = array(
    '#type' => 'value',
    '#value' => $question_id,
  );

  $form['answer_id'] = array(
    '#type' => 'value',
    '#value' => $answer_id,
  );

  $form['log_content'] = array(
    '#type' => 'textarea',
    '#title' => t('Internal log'),
    '#required' => TRUE,
    '#default_value' => $log ? $log->log_content : '',
  );

  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Add log message'),
    '#ajax' => array(
      'callback' => 'vopros_log_form_ajax_submit',
    )
  );

  return $form;
}

/**
 * Handles saving the log.
 */
function vopros_log_form_ajax_submit(&$form, &$form_state) {
  global $user;
  $values = array(
    'question_id' => $form_state['values']['question_id'],
    'answer_id' => $form_state['values']['answer_id'],
    'log_content' => $form_state['values']['log_content'],
    'uid' => $user->uid,
  );
  $log = vopros_log_new($values);
  vopros_log_save($log);
  $commands = array();
  $commands[] = ajax_command_invoke('#edit-log-content', 'val', array(''));
  // TODO: Show to the user somehow that the log was saved.
  // TODO: Add the actual log to the "activity stream".
  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Implements hook_enyity_view_alter().
 */
function vopros_log_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type == 'vopros_question' && $view_mode == 'administrator') {
    $entity->content['right']['log_form'] = drupal_get_form('vopros_log_form', NULL, $entity->question_id);
  }
}

/**
 * Implements hook_vopros_question_activity_feed().
 */
function vopros_log_vopros_question_activity_feed($question, &$feed) {
  $logs = vopros_log_load_multiple(FALSE, array('question_id' => $question->question_id));
  foreach ($logs as $log_id => $log) {
    $feed['log_' . $log_id] = array(
      '#weight' => $log->created,
      '#log' => $log,
      '#theme' => 'vopros_log_question_feed',
    );
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vopros_log_form_vopros_answer_form_alter(&$form, &$form_state) {
  $form['action']['log'] = vopros_log_form(array(), $form_state, NULL, $form['question']['#value']->question_id, $form['answer']['#value']->answer_id);
  $form['action']['log']['log_content']['#required'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vopros_log_form_vopros_email_question_contact_form_alter(&$form, &$form_state) {
  $form['action']['log'] = vopros_log_form(array(), $form_state, NULL, $form['question']['#value']->question_id, NULL);
  $form['action']['log']['log_content']['#required'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vopros_log_form_vopros_question_question_frontend_form_alter(&$form, &$form_state) {
  $form['action']['log'] = vopros_log_form(array(), $form_state, NULL, $form['question']['#value']->question_id, NULL);
  $form['action']['log']['log_content']['#required'] = FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vopros_log_form_vopros_question_question_form_alter(&$form, &$form_state) {
  if ($form['question']['#value']->question_status != 'new') {
    $form['action']['log'] = vopros_log_form(array(), $form_state, NULL, $form['question']['#value']->question_id, NULL);
    $form['action']['log']['log_content']['#required'] = FALSE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function vopros_log_form_vopros_question_close_question_form_alter(&$form, &$form_state) {
  $form['log'] = vopros_log_form(array(), $form_state, NULL, $form['question']['#value']->question_id, NULL);
  $form['log']['log_content']['#required'] = FALSE;
  unset($form['log']['save']);
  $form['#submit'] = array('vopros_log_form_vopros_question_close_question_form_submit', 'vopros_question_close_question_form_submit');
}

/**
 * Submit handler for the log part of the vopros_question_close_question_form().
 * @see vopros_log_form_vopros_question_close_question_form_alter().
 */
function vopros_log_form_vopros_question_close_question_form_submit(&$form, &$form_state) {
  global $user;
  if (trim($form_state['values']['log_content']) && $form_state['values']['reason'] != 'answered') {
    $values = array(
      'question_id' => $form_state['values']['question_id'],
      'log_content' => $form_state['values']['log_content'],
      'uid' => $user->uid,
    );
    $log = vopros_log_new($values);
    vopros_log_save($log);
  }
}

/**
 * Implements hook_theme().
 */
function vopros_log_theme() {
  $path = drupal_get_path('module', 'vopros_log') . '/theme';
  return array(
    'vopros_log_question_feed' => array(
      'render element' => 'log',
      'file' => 'vopros_log.theme.inc',
      'path' => $path,
    ),
  );
}
