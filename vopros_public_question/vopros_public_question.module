<?php

/**
 * @file
 */

/**
 * Implements hook_entity_info().
 */
function vopros_public_question_entity_info() {
  $return = array(
    'vopros_public_question' => array(
      'label' => t('Public question', array(), array('context' => 'a vopros question')),
      'controller class' => 'VoprosPublicQuestionEntityController',
      'base table' => 'vopros_public_question',
      'revision table' => 'vopros_public_question_revision',
      'fieldable' => FALSE,
      'uri callback' => 'vopros_public_question_uri',
      'entity keys' => array(
        'id' => 'public_question_id',
        'revision' => 'revision_id',
      ),
      'bundles' => array(
        'vopros_public_question' => array(
          'label' => t('Public question', array(), array('context' => 'a vopros public question')),
          'admin' => array(
            'path' => 'admin/vopros/config/public-question',
            'access arguments' => array('administer questions'),
          ),
        ),
      ),
      'load hook' => 'vopros_public_question_load',
      'view modes' => array(
        'default' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
      'access callback' => 'vopros_public_question_access',
      // Uncommet to add views integration.
      //'views controller class' => 'EntityDefaultViewsController',
    ),
  );

  return $return;
}

/**
 * Entity uri callback.
 */
function vopros_public_question_uri($question) {
  return array(
    'path' => 'admin/vopros/public-questions/' . $question->question_id,
  );
}

/**
 * Implementation of hook_menu().
 */
function vopros_public_question_menu() {
  return array(
    'admin/vopros/config/public-question' => array(
      'title' => 'Public question settings',
      'description' => 'Configure general question settings, fields, and displays.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('vopros_public_question_settings_form'),
      'access arguments' => array('administer questions'),
      'file' => 'includes/vopros_public_question.admin.inc',
    ),
    'admin/vopros/config/public-question/settings' => array(
      'title' => 'Settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    ),
    'admin/vopros/public-questions/%vopros_public_question' => array(
    ),
    'admin/vopros/questions/%vopros_public_question/view' => array(
      'title' => 'View',
       'type' => MENU_DEFAULT_LOCAL_TASK,
       'weight' => -10,
    ),
    'admin/vopros/questions/%vopros_public_question/edit' => array(
      'title' => 'Edit',
      'page callback' => 'drupal_get_form',
      //'page arguments' => array('vopros_question_question_frontend_form', 3),
      'access callback' => 'vopros_public_question_access',
      'access arguments' => array('update'),
      'file' => 'includes/vopros_public_question.admin.inc',
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    ),
  );
}


/**
 * Implements hook_permission().
 */
function vopros_public_question_permission() {
  $permissions = array(
    'administer public questions' => array(
      'title' => t('Administer public questions'),
      'restrict access' => TRUE,
    ),
    'access public questions' => array(
      'title' => t('Access public questions'),
      'restrict access' => TRUE,
    ),
    'create public questions' => array(
      'title' => t('Create public questions'),
      'restrict access' => TRUE,
    ),
    'edit public questions' => array(
      'title' => t('Edit any public question'),
      'restrict access' => TRUE,
    ),
  );

  return $permissions;
}

/**
 * Checks question access for various operations.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function vopros_public_question_access($op, $question = NULL, $account = NULL) {
  global $user;
  $account = isset($account) ? $account : clone($user);

  // Grant access to any operation for any question for administrators.
  if (user_access('administer public questions', $account)) {
    return TRUE;
  }

  // Grant view access to users with the administrative access questions permission
  // or to a user's own questions with the view own questions permission.
  if ($op == 'view') {
    if (user_access('access public questions', $account)) {
      return TRUE;
    }
  }

  if ($op == 'create' && user_access('create public questions', $account)) {
    return TRUE;
  }

  if (($op == 'update' || $op == 'delete') && user_access('edit any public question', $account)) {
    return TRUE;
  }

  return FALSE;
}

/**
 * Create a new question object
 */
function vopros_public_question_new($values = array()) {
  return entity_create('vopros_public_question', $values);
}

/**
 * Save a question
 *
 * @param $question
 *    The question object
 * @param $revision
 *    Bolean indicator, if a new revision should be created.
 */
function vopros_public_question_save($question, $revision = 1) {
  $question->revision = $revision;
  entity_save('vopros_public_question', $question);
}

/**
 * Loads an question by ID.
 */
function vopros_public_question_load($question_id, $revision_id = NULL, $reset = FALSE) {
  $conditions = array();
  if ($revision_id) {
    $conditions['revision_id'] = $revision_id;
  }
  $questions = vopros_public_question_load_multiple(array($question_id), $conditions, $reset);
  return $questions ? reset($questions) : FALSE;
}

/**
 * Loads an revision of a question.
 */
function vopros_public_question_revision_load($revision_id) {
  $questions = vopros_public_question_load_multiple(array(), array('revision_id' => $revision_id), FALSE);
  return $questions ? reset($questions) : FALSE;
}

/**
 * Loads multiple questions by ID or based on a set of matching conditions.
 *
 * @see entity_load()
 *
 * @param $question_ids
 *   An array of question IDs.
 * @param $conditions
 *   An array of conditions on the {vopros_public_question} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal question loading cache.
 *
 * @return
 *   An array of question objects indexed by question_id.
 */
function vopros_public_question_load_multiple($question_ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('vopros_public_question', $question_ids, $conditions, $reset);
}
